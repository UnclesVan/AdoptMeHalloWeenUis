-- Variables for player and UI references
local player = game:GetService("Players").LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Updated reference to the currency amount label
local originalAmountLabel = playerGui:WaitForChild("SocialStonesIndicatorApp"):WaitForChild("CurrencyIndicator"):WaitForChild("Container"):WaitForChild("Amount")

-- Reference to the original timer label
local originalTimerLabel = playerGui:WaitForChild("QuestIconApp"):WaitForChild("ImageButton"):WaitForChild("EventContainer"):WaitForChild("EventFrame"):WaitForChild("EventImageBottom"):WaitForChild("EventTime")

-- Reference to the original Formula FRAME UI element
local formulaFrameOriginal = playerGui:WaitForChild("SocialStonesIndicatorApp"):WaitForChild("CurrencyIndicator"):WaitForChild("SocialStones"):WaitForChild("Formula"):WaitForChild("Frame")

local clonedFormulaFrame = nil -- Declare a variable to store the cloned frame for refreshing

-- Create the ScreenGui for the currency display
local currencyUI = Instance.new("ScreenGui")
currencyUI.Name = "CurrencyUI"
currencyUI.Parent = playerGui

-- Create the Frame for the currency display
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0.3, 0, 0.25, 0) -- Initial size, will be animated
frame.Position = UDim2.new(0.5, -0.15, 0.05, 0) -- Initial position, will be animated
frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
frame.BackgroundTransparency = 0.2
frame.BorderSizePixel = 0
frame.Parent = currencyUI

-- Add rounded corners to the frame
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0.2, 0)
corner.Parent = frame

-- Create a TextLabel for the currency amount
local amountDisplay = Instance.new("TextLabel", frame)
amountDisplay.Size = UDim2.new(0.55, 0, 0.7, 0)
amountDisplay.Position = UDim2.new(0.35, 0, 0.25, 0)
amountDisplay.BackgroundTransparency = 1
amountDisplay.TextColor3 = Color3.new(0, 0, 0)
amountDisplay.TextScaled = true
amountDisplay.Font = Enum.Font.SourceSansBold
amountDisplay.TextStrokeTransparency = 0.5
amountDisplay.Text = originalAmountLabel.Text

-- Function to update the amount
local function updateCurrencyAmount()
    amountDisplay.Text = originalAmountLabel.Text
end

-- Connect update function to original amount label changes
if originalAmountLabel then
    originalAmountLabel.Changed:Connect(updateCurrencyAmount)
    updateCurrencyAmount() -- Initial update
else
    warn("Original Amount Label not found!")
end


-- Create a label to display the timer
local timerLabel = Instance.new("TextLabel", frame)
timerLabel.Size = UDim2.new(1, 0, 0.3, 0)  -- Full width for a straight line
timerLabel.Position = UDim2.new(0, 0, -0.3, 0)  -- Moved this higher, outside the main frame area visually
timerLabel.BackgroundTransparency = 1
timerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
timerLabel.TextScaled = false  -- Scale text to fit
timerLabel.Font = Enum.Font.SourceSansBold
timerLabel.TextStrokeTransparency = 0.5
timerLabel.TextTruncate = Enum.TextTruncate.AtEnd
timerLabel.TextSize = 47  -- Set a reasonable text size

-- Create an event over label
local eventOverLabel = Instance.new("TextLabel", frame)
eventOverLabel.Size = UDim2.new(1, 0, 0.2, 0)
eventOverLabel.Position = UDim2.new(0, 0, 0.75, 0)
eventOverLabel.BackgroundTransparency = 1
eventOverLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
eventOverLabel.TextScaled = true
eventOverLabel.Font = Enum.Font.SourceSansBold
eventOverLabel.TextStrokeTransparency = 0.5
eventOverLabel.Text = ""
eventOverLabel.Visible = false  -- Hidden by default

-- Function to check if the timer has reached zero and kick the player
local function checkTimerAndKick()
    if originalTimerLabel and originalTimerLabel.Text then
        local daysRemaining = tonumber(string.match(originalTimerLabel.Text, "%d+")) or 0
        if daysRemaining <= 0 then
            player:Kick("You were kicked from this Experience. The event has ended. Please check for updates.")
            eventOverLabel.Text = "EVENT IS OVER"  -- Update the event over label
            eventOverLabel.Visible = true  -- Show the label
        end
    end
end

-- Function to update the timer label exactly from the original timer label
local function updateTimerFromGameUI()
    if originalTimerLabel and originalTimerLabel.Text then
        timerLabel.Text = originalTimerLabel.Text -- Directly copy the text without modification
        checkTimerAndKick()
    else
        warn("Original Timer Label not found or has no text!")
    end
end

-- Connect to the original timer label's Changed event
if originalTimerLabel then
    originalTimerLabel.Changed:Connect(updateTimerFromGameUI)
    updateTimerFromGameUI() -- Initial update
else
    warn("Original Timer Label not found!")
end

-- Add the owner label
local ownerLabel = Instance.new("TextLabel", frame)
ownerLabel.Size = UDim2.new(1, 0, 0.2, 0)
ownerLabel.Position = UDim2.new(0, 0, 0.1, 0)
ownerLabel.BackgroundTransparency = 1
ownerLabel.TextColor3 = Color3.new(0, 0, 0)
ownerLabel.TextScaled = true
ownerLabel.Font = Enum.Font.SourceSansBold
ownerLabel.TextStrokeTransparency = 0.5
ownerLabel.Text = "Private Script Owner: made by me"

-- Add the kick warning label (Original position: 0.85 Y.Scale)
local kickWarning = Instance.new("TextLabel", frame)
kickWarning.Size = UDim2.new(1, 0, 0.2, 0)
kickWarning.Position = UDim2.new(0, 0, 0.85, 0)
kickWarning.BackgroundTransparency = 0.5
kickWarning.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
kickWarning.TextColor3 = Color3.fromRGB(255, 255, 255)
kickWarning.TextScaled = true
kickWarning.Font = Enum.Font.SourceSansBold
kickWarning.TextStrokeTransparency = 0.5
kickWarning.Text = "You will be kicked from this Experience once there is a new Patch In place and when the timer hits 0."


-- ==================== START OF FORMULA FRAME CLONING AND REFRESH FUNCTIONALITY ====================

-- Function to refresh the cloned Formula Frame
local function refreshFormulaFrame()
    -- Check if there's an existing cloned frame and destroy it
    if clonedFormulaFrame and clonedFormulaFrame.Parent then
        clonedFormulaFrame:Destroy()
        clonedFormulaFrame = nil -- Clear the reference
    end

    -- Check if the original formula frame exists and clone it again
    if formulaFrameOriginal then
        clonedFormulaFrame = formulaFrameOriginal:Clone()
        clonedFormulaFrame.Parent = frame -- Parent it back to your custom frame
        clonedFormulaFrame.Position = UDim2.new(0, 300, 1.0999999, 30) -- Set position
        clonedFormulaFrame.Size = UDim2.new(1, 0, 0.2, 0) -- Set size

        -- You might want to reapply any custom properties here if you had them
        -- clonedFormulaFrame.BackgroundTransparency = 0.5
        -- clonedFormulaFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 255)

     -- refresh
    else
        warn("Original Formula FRAME UI element not found for refresh!")
    end
end


-- Initial cloning of the Formula FRAME UI element (still needed for the first display)
if formulaFrameOriginal then
    -- Clone the Formula FRAME UI element and store it
    clonedFormulaFrame = formulaFrameOriginal:Clone()

    -- Parent it to your custom frame
    clonedFormulaFrame.Parent = frame

    -- Set its position below the kick warning label (at the position where the Christmas label was)
    -- Position 1.05 Y.Scale is below kickWarning (0.85)
    clonedFormulaFrame.Position = UDim2.new(0, 300, 1.0999999, 30)
    clonedFormulaFrame.Size = UDim2.new(1, 0, 0.2, 0) -- Set a suitable size for the frame (matching other labels)

    -- Optional: Adjust properties of the cloned frame or its children if needed
    -- clonedFormulaFrame.BackgroundTransparency = 0.5 -- Example: make it slightly transparent
    -- clonedFormulaFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 255) -- Example: change background color

    -- Note: Cloning a Frame copies its children at that moment.
    -- If the content *inside* the original `Formula.Frame` changes dynamically
    -- in the game, the cloned version will *not* automatically update unless
    -- you add separate code to monitor and update its children.

else
    warn("Original Formula FRAME UI element not found!")
end

-- Add a loop to automatically refresh the formula frame in the background
coroutine.wrap(function() -- Use a coroutine to avoid blocking the rest of the script
    while true do
        refreshFormulaFrame()
        wait(5) -- Wait for 5 seconds before refreshing again (adjust this value as needed)
    end
end)()


-- ==================== END OF FORMULA FRAME CLONING AND REFRESH FUNCTIONALITY ====================


-- Removed Christmas Countdown Labels and functions


-- Add the "Close" button
local closeButtonContainer = Instance.new("Frame", frame)
closeButtonContainer.Size = UDim2.new(0.1, 0, 0.5, 0)
closeButtonContainer.Position = UDim2.new(0.9, -0.1, 0.25, 0)
closeButtonContainer.BackgroundColor3 = Color3.fromRGB(255, 200, 200)
closeButtonContainer.BorderSizePixel = 0
closeButtonContainer.BackgroundTransparency = 0.2

local closeButton = Instance.new("TextButton", closeButtonContainer)
closeButton.Size = UDim2.new(1, 0, 1, 0)
closeButton.BackgroundColor3 = Color3.fromRGB(255, 58, 58)
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.Font = Enum.Font.SourceSansBold
closeButton.TextSize = 36
closeButton.Text = "X"

-- Hover effect for close button
closeButton.MouseEnter:Connect(function()
    closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
end)

closeButton.MouseLeave:Connect(function()
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 58, 58)
end)

-- Close button functionality
closeButton.MouseButton1Click:Connect(function()
    local tweenService = game:GetService("TweenService")
    local closeTween = tweenService:Create(frame, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        Size = UDim2.new(0, 0, 0, 0),
        Position = UDim2.new(0.5, -0.15, 0.5, -0.1)
    })
    closeTween:Play()
    closeTween.Completed:Wait()
    currencyUI:Destroy()
end)

-- Add the "Open" button beside the Close Button
local openButtonContainer = Instance.new("Frame", frame)
openButtonContainer.Size = UDim2.new(0.1, 0, 0.5, 0)
openButtonContainer.Position = UDim2.new(1, -0.1, 0.25, 0) -- Positioned relative to the main frame
openButtonContainer.BackgroundColor3 = Color3.fromRGB(200, 255, 200)
openButtonContainer.BorderSizePixel = 0
openButtonContainer.BackgroundTransparency = 0.2

local openButton = Instance.new("TextButton", openButtonContainer)
openButton.Size = UDim2.new(1, 0, 1, 0)
openButton.BackgroundColor3 = Color3.fromRGB(58, 255, 58)
openButton.TextColor3 = Color3.fromRGB(0, 0, 0)
openButton.Font = Enum.Font.SourceSansBold
openButton.TextSize = 24
openButton.Text = "Open"

-- Hover effect for open button
openButton.MouseEnter:Connect(function()
    openButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
end)

openButton.MouseLeave:Connect(function()
    openButton.BackgroundColor3 = Color3.fromRGB(58, 255, 58)
end)

-- Open button functionality (opens the Fluent UI window)
openButton.MouseButton1Click:Connect(function()
    -- Load Fluent UI
    local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

    if Fluent then
        local Window = Fluent:CreateWindow({
            Title = "Fire Hub",
            SubTitle = "Testing UI Functionality",
            TabWidth = 160,
            Size = UDim2.fromOffset(580, 460),
            Acrylic = false,
            Theme = "Dark",
        })

        -- Create the "Main" tab
        local Tabs = {}
        Tabs.Main = Window:AddTab({ Title = "Main", Icon = "" })
        Tabs.StampsFarm = Window:AddTab({ Title = "Stamps Farm", Icon = "" })

        -- Add a new tab for Pet-Farm
        Tabs.PetFarm = Window:AddTab({ Title = "Pet-Farm: Coming Soon", Icon = "" })

        -- Add a button to the "Main" tab to refresh the Formula Display
        Tabs.Main:AddButton({
            Title = "Refresh Formula Display",
            Callback = function()
                refreshFormulaFrame() -- Call the refresh function when the button is clicked
            end
        })

        -- Toggleable farming logic for Stamps
        local farmingActive = false -- Variable to track farming state

        -- Add a button to the "Stamps Farm" tab
        local stampsButton = Tabs.StampsFarm:AddButton({
            Title = "Collect Stamps",
            Callback = function()
                if farmingActive then
                    print("Stopping stamp collection.")
                    farmingActive = false
                else
                    print("Starting stamp collection.")
                    farmingActive = true

                    -- Use a coroutine to keep farming logic separate
                    coroutine.wrap(function()
                        while farmingActive do
                            print("Collecting stamps...")
                            local api = game:GetService("ReplicatedStorage"):WaitForChild("API")
                            local claimStamp = api:FindFirstChild("DdlmAPI/ClaimStamp")
                            if claimStamp then
                                claimStamp:FireServer()
                            else
                                warn("ClaimStamp RemoteEvent not found!")
                            end
                            wait(1) -- Wait for 1 second between attempts
                        end
                    end)()
                end
            end
        })

        -- Show the Fluent UI window
        Window.Visible = true
    else
        warn("Failed to load Fluent UI!")
    end
end)

-- Function to pop in the UI
local function popInUI()
    frame.Position = UDim2.new(0.5, -0.15, 0.1, 0) -- Start slightly higher
    frame.Size = UDim2.new(0, 0, 0, 0) -- Start at size zero
    frame.Visible = true -- Make it visible before tweening

    local tweenService = game:GetService("TweenService")
    -- Target size and position after pop-in
    local targetPosition = UDim2.new(0.5, -0.15, 0.05, 0)
    local targetSize = UDim2.new(0.3, 0, 0.15, 0) -- Adjusted size to fit content

    local popTween = tweenService:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out), {
        Position = targetPosition,
        Size = targetSize
    })
    popTween:Play()
end

-- Call the pop-in function to show the UI with animation
popInUI()

-- Draggable functionality
local dragging = false
local dragStart = nil
local startPos = nil
local userInputService = game:GetService("UserInputService")

local function updateInput(input)
    if dragging then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end

frame.InputBegan:Connect(function(input)
    -- Only start dragging if the input is within the frame bounds
    if input.UserInputType == Enum.UserInputType.MouseButton1 and frame:IsA("GuiObject") and frame.AbsolutePosition.X <= input.Position.X and input.Position.X <= frame.AbsolutePosition.X + frame.AbsoluteSize.X and frame.AbsolutePosition.Y <= input.Position.Y and input.Position.Y <= frame.AbsolutePosition.Y + frame.AbsoluteSize.Y then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
    end
end)

-- Use InputEnded for stopping drag
userInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

userInputService.InputChanged:Connect(updateInput)


-- Hover effects for the frame (Adjusted size to match pop-in animation)
frame.MouseEnter:Connect(function()
    local tweenService = game:GetService("TweenService")
    tweenService:Create(frame, TweenInfo.new(0.3, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out), {
        Size = UDim2.new(0.32, 0, 0.17, 0) -- Slightly larger on hover
    }):Play()
end)

frame.MouseLeave:Connect(function()
    local tweenService = game:GetService("TweenService")
    tweenService:Create(frame, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        Size = UDim2.new(0.3, 0, 0.15, 0) -- Return to normal size
    }):Play()
end)


-- Add the candy corn image with updated ID
local candyCorn = Instance.new("ImageLabel", frame)
candyCorn.Size = UDim2.new(0.35, 0, 0.9, 0)
candyCorn.Position = UDim2.new(0.02, 0, 0.05, 0)
candyCorn.BackgroundTransparency = 1
candyCorn.Image = "rbxassetid://94021119253021"  -- Updated image ID
candyCorn.ScaleType = Enum.ScaleType.Fit

--all old image IDs from Adopt Me! Devs:
--Candy Corn ID: 6048692831 patched.
--Stars ID: 80184394321521 patched.
-- 80184394321521 patched.
-- Hearts 86091048492397 patched
-- 106495507831851 shards patched

-- Create the "READY FOR CHRISTMAS" message on top of the candy corn image
local readyForChristmasLabel = Instance.new("TextLabel", frame)
readyForChristmasLabel.Size = UDim2.new(0.35, 0, 0.3, 0)  -- Adjust size as necessary
readyForChristmasLabel.Position = UDim2.new(0.02, 0, 0.35, 0)  -- Centered over the image
readyForChristmasLabel.BackgroundTransparency = 1
readyForChristmasLabel.TextColor3 = Color3.fromRGB(132, 182, 141)  -- White text
readyForChristmasLabel.TextScaled = true
readyForChristmasLabel.Font = Enum.Font.SourceSansBold
readyForChristmasLabel.TextStrokeTransparency = 0.5
readyForChristmasLabel.Text = "" -- You can set text here if needed
