local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local startTestEvent = ReplicatedStorage:WaitForChild("StartTestEvent")

local screenGui = nil
local textLabel = nil
local flashingTween = nil

-- Function to format seconds into HH:MM:SS
local function formatTime(seconds)
    local hours = math.floor(seconds / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local remainingSeconds = math.floor(seconds % 60)
    return string.format("%02d:%02d:%02d", hours, minutes, remainingSeconds)
end

-- Create UI elements if not already created
local function createUI()
    if screenGui and screenGui.Parent then
        return
    end

    screenGui = Instance.new("ScreenGui")
    screenGui.Name = "TestCountdownUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = player:WaitForChild("PlayerGui")

    textLabel = Instance.new("TextLabel")
    textLabel.Name = "CountdownLabel"
    textLabel.Size = UDim2.new(0.5, 0, 0.1, 0)
    textLabel.Position = UDim2.new(0.25, 0, 0.1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextSize = 50
    textLabel.TextColor3 = Color3.fromRGB(255, 0, 0) -- Red
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    textLabel.Text = "Loading Timer..."
    textLabel.ZIndex = 10
    textLabel.Parent = screenGui

    -- Create flashing tween for TextColor
    local tweenInfo = TweenInfo.new(
        0.5,
        Enum.EasingStyle.Sine,
        Enum.EasingDirection.InOut,
        -1,
        true,
        0
    )

    flashingTween = TweenService:Create(
        textLabel,
        tweenInfo,
        { TextColor3 = Color3.fromRGB(255, 100, 100) }
    )

    -- Start flashing
    flashingTween:Play()
end

-- Function to start the countdown timer
local function startCountdown(durationSeconds)
    createUI()

    -- Cancel previous tween if any
    if flashingTween then
        flashingTween:Cancel()
    end

    -- Reset UI properties
    textLabel.Text = "Starting..."
    textLabel.TextColor3 = Color3.fromRGB(255, 0, 0)

    -- Initialize countdown
    local startTime = os.time()
    local endTime = startTime + durationSeconds

    -- Countdown loop
    while true do
        if not textLabel or not textLabel.Parent then break end

        local now = os.time()
        local remaining = endTime - now

        if remaining <= 0 then
            -- Timer finished
            if flashingTween then
                flashingTween:Cancel()
                flashingTween = nil
            end
            textLabel.Text = "TIME'S UP!"
            textLabel.TextColor3 = Color3.fromRGB(255, 255, 0) -- Yellow

            -- Optional: keep the message for a while
            wait(5)

            -- Fade out the UI
            local fadeInfo = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
            local fadeTween = TweenService:Create(screenGui, fadeInfo, {BackgroundTransparency = 1, TextTransparency = 1})
            fadeTween:Play()
            fadeTween.Completed:Wait()

            -- Destroy UI
            screenGui:Destroy()
            screenGui = nil
            textLabel = nil
            break
        else
            -- Update display
            textLabel.Text = "Time Remaining: " .. formatTime(remaining)
        end

        wait(1)
    end
end

-- Listen for server signal to start the timer
startTestEvent.OnClientEvent:Connect(function(durationHours)
    local durationSeconds = durationHours * 3600
    startCountdown(durationSeconds)
end)

-- Optional: For testing, you can trigger the timer manually:
-- startCountdown(60) -- 1 minute countdown
