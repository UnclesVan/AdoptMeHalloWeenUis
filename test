-- LocalScript
-- Place this in StarterPlayerScripts or inside a ScreenGui

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer

-- RemoteEvents (must match server script)
local showUITestEvent = ReplicatedStorage:WaitForChild("ShowUITestEvent")
local updateTimerEvent = ReplicatedStorage:WaitForChild("UpdateTimerEvent") -- RemoteEvent for timer updates

local screenGui = nil -- Reference to the ScreenGui
local textLabel = nil -- Reference to the TextLabel
local flashingTween = nil -- To control the flashing tween
local fadeTween = nil -- To handle fade out tween

local timerRunning = false
local currentTestStartTime = 0
local totalTestDuration = 0

-- Function to format seconds into HH:MM:SS
local function formatTime(seconds)
    local hours = math.floor(seconds / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local remainingSeconds = math.floor(seconds % 60)
    return string.format("%02d:%02d:%02d", hours, minutes, remainingSeconds)
end

-- Function to create and initialize UI elements
local function createUIElements()
    if screenGui and screenGui.Parent then
        return screenGui, textLabel -- Already exists
    end

    screenGui = Instance.new("ScreenGui")
    screenGui.Name = "TestUIMainScreen"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = player:WaitForChild("PlayerGui")

    textLabel = Instance.new("TextLabel")
    textLabel.Name = "FlashingTestLabel"
    textLabel.Size = UDim2.new(0.5, 0, 0.1, 0)
    textLabel.Position = UDim2.new(0.25, 0, 0.1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextSize = 50
    textLabel.TextColor3 = Color3.fromRGB(255, 0, 0) -- Initial Red
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    textLabel.Text = "Loading Timer..."
    textLabel.ZIndex = 10
    textLabel.Parent = screenGui

    -- Create flashing tween
    local tweenInfo = TweenInfo.new(
        0.5,
        Enum.EasingStyle.Sine,
        Enum.EasingDirection.InOut,
        -1,
        true,
        0
    )

    flashingTween = TweenService:Create(
        textLabel,
        tweenInfo,
        { TextColor3 = Color3.fromRGB(255, 100, 100) }
    )

    -- Start flashing
    flashingTween:Play()

    return screenGui, textLabel
end

-- Function to start countdown timer
local function startCountdown(startTime, duration)
    -- Avoid restarting if same parameters
    if timerRunning and currentTestStartTime == startTime and totalTestDuration == duration then
        return
    end

    -- If already running with different params, stop previous
    if timerRunning then
        timerRunning = false
        -- Wait briefly to allow loop to exit
        task.wait(0.1)
    end

    -- Cancel previous fadeTween if any
    if fadeTween then
        fadeTween:Cancel()
        fadeTween = nil
    end

    currentTestStartTime = startTime
    totalTestDuration = duration
    timerRunning = true

    createUIElements()

    -- Reset UI properties
    if screenGui then
        screenGui.BackgroundTransparency = 0
        -- Optional: reset TextLabel transparency if needed
        -- textLabel.Text = ""
        -- textLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
    end

    -- Main countdown loop
    while timerRunning and textLabel and textLabel.Parent do
        local elapsedSeconds = os.time() - currentTestStartTime
        local remainingSeconds = totalTestDuration - elapsedSeconds

        if remainingSeconds <= 0 then
            -- End of test
            if flashingTween then
                flashingTween:Cancel()
                flashingTween = nil
            end

            textLabel.Text = "TEST OVER!"
            textLabel.TextColor3 = Color3.fromRGB(255, 255, 0) -- Yellow

            -- Show for 5 seconds
            task.wait(5)

            -- Fade out the UI
            if screenGui then
                local fadeInfo = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                fadeTween = TweenService:Create(screenGui, fadeInfo, {BackgroundTransparency = 1, TextTransparency = 1})
                fadeTween:Play()
                fadeTween.Completed:Wait()
                -- Destroy UI after fade
                screenGui:Destroy()
                screenGui = nil
                textLabel = nil
            end

            timerRunning = false
            break
        else
            -- Update the timer display
            textLabel.Text = "THIS IS A TEST FOR " .. formatTime(remainingSeconds)
        end
        task.wait(1)
    end
end

-- Handler for showing the UI
showUITestEvent.OnClientEvent:Connect(function()
    createUIElements()
end)

-- Handler for updating the timer
updateTimerEvent.OnClientEvent:Connect(function(serverStartTime, serverDuration)
    startCountdown(serverStartTime, serverDuration)
end)
